<?xml version="1.0" encoding="UTF-8"?>
<project name="Common Builder" default="build">

    <autoloader autoloaderpath="vendor/autoload.php"/>

    <property name="mode" value=""/>
    <property name="env" value=""/>

    <property name="file.zip" value="build-${env}-${mode}.zip"/>

    <property name="dir.dist" value="dist"/>
    <property name="dir.temp" value="${dir.dist}/temp"/>
    <property name="dir.report" value="${dir.dist}/report"/>
    <property name="dir.report.phpmd" value="${dir.report}/phpmd"/>
    <property name="dir.report.phpcs" value="${dir.report}/phpcs"/>
    <property name="dir.report.lint" value="${dir.report}/lint"/>
    <property name="dir.report.pdepend" value="${dir.report}/pdepend"/>
    <property name="dir.report.phpcpd" value="${dir.report}/phpcpd"/>
    <property name="dir.report.phploc" value="${dir.report}/phploc"/>
    <property name="dir.report.apigen" value="${dir.report}/apigen"/>
    <property name="dir.report.doc" value="${dir.report}/phpdocumentor"/>

    <!-- These files will be checked when generating reports -->
    <!-- Modify per project as necessary -->
    <fileset dir="${dir.temp}" id="testfiles">
        <include name="src/**/*.php"/>
    </fileset>

    <!-- Same set of dirs (comma separated) as list -->
    <property name="list.testfiles" value="${dir.temp}/src"/>

    <!-- These files will be copied over to dist when triggering a build -->
    <!-- Modify per project as necessary -->
    <fileset dir="." id="buidfiles">
        <include name="src/**/*"/>
        <include name="public/**/*"/>
        <include name="composer.json"/>
        <include name="composer.lock"/>
    </fileset>

    <!-- These files will be packed into the dist zipfile after executing composer install -->
    <!-- Modify per project as necessary -->
    <fileset dir="${dir.temp}" id="zipfiles">
        <include name="**/*"/>
        <exclude name="composer.*"/>
    </fileset>

    <target name="full" depends="bootstrap,create:reports,composer,zip,clear:temp"/>
    <target name="build" depends="bootstrap,composer,zip,clear:temp,clear:lint"/>
    <target name="report" depends="bootstrap,create:reports,clear:temp"/>

    <target name="bootstrap" hidden="true" depends="precheck,make:dist,report:lint"/>
    <target name="create:reports"
            hidden="true"
            depends="
            report:phpmd,
            report:phpcs,
            report:pdepend,
            report:phploc,
            report:phpcpd,
            report:apigen,
            report:documentor"
    />

    <target name="precheck" hidden="true">
        <php expression="in_array('${mode}', ['production', 'development']);" returnProperty="check.inarray"/>
        <if>
            <equals arg1="${check.inarray}" arg2="false"/>
            <then>
                <fail msg="No valid mode is set"/>
            </then>
        </if>
        <if>
            <equals arg1="${env}" arg2=""/>
            <then>
                <fail msg="No environment is set"/>
            </then>
        </if>
    </target>

    <target name="make:dist" depends="clear:dist" hidden="true">
        <mkdir dir="${dir.dist}"/>
        <mkdir dir="${dir.temp}"/>
        <mkdir dir="${dir.report}"/>
        <mkdir dir="${dir.report.lint}"/>
        <php expression="file_put_contents('${dir.report}/build.json', json_encode(['date'=>date('Y-m-d H:i:s'),'mode'=>'${mode}','environment'=>'${env}'], JSON_PRETTY_PRINT));"/>
        <copy todir="${dir.temp}">
            <fileset refid="buidfiles"/>
        </copy>
    </target>

    <target name="clear:dist" hidden="true">
        <phingcall target="delete:dir">
            <param name="dir.delete" value="${dir.dist}"/>
        </phingcall>
    </target>

    <target name="clear:temp" hidden="true">
        <phingcall target="delete:dir">
            <param name="dir.delete" value="${dir.temp}"/>
        </phingcall>
    </target>

    <target name="clear:lint" hidden="true">
        <delete dir="${dir.report.lint}"/>
    </target>

    <target name="delete:dir" hidden="true">
        <php function="is_dir" returnProperty="is.dir">
            <param value="${dir.delete}"/>
        </php>
        <if>
            <equals arg1="${is.dir}" arg2="true"/>
            <then>
                <!-- https://github.com/phingofficial/phing/issues/556 -->
                <!--suppress PhingDomInspection -->
                <chmod mode="777">
                    <fileset dir="${dir.delete}" defaultexcludes="false">
                        <include name="**/.git/**" />
                    </fileset>
                </chmod>
            </then>
        </if>
        <delete dir="${dir.delete}" includeemptydirs="true"/>
    </target>

    <target name="composer" hidden="true">
        <php function="file_exists" returnProperty="file.composer.exists">
            <param value="composer.phar"/>
        </php>
        <if>
            <equals arg1="${file.composer.exists}" arg2="true"/>
            <then>
                <composer command="self-update"/>
            </then>
            <else>
                <httpget dir="." url="https://getcomposer.org/composer.phar" filename="composer.phar" sslVerifyPeer="false"/>
            </else>
        </if>
        <if>
            <equals arg1="${mode}" arg2="production"/>
            <then>
                <composer command="install">
                    <!-- arg value="- -ignore-platform-reqs"/-->
                    <arg value="--no-dev"/>
                    <arg value="--optimize-autoloader"/>
                    <arg value="--no-suggest"/>
                    <arg value="--no-progress"/>
                    <arg value="--working-dir"/>
                    <arg value="${dir.temp}"/>
                </composer>
            </then>
            <else>
                <composer command="install">
                    <!-- arg value="- -ignore-platform-reqs"/-->
                    <arg value="--optimize-autoloader"/>
                    <arg value="--no-suggest"/>
                    <arg value="--no-progress"/>
                    <arg value="--working-dir"/>
                    <arg value="${dir.temp}"/>
                </composer>
            </else>
        </if>
        <delete file="composer.phar"/>
    </target>

    <target name="zip" hidden="true">
        <delete file="${dir.dist}/${file.zip}"/>
        <zip destfile="${dir.dist}/${file.zip}" includeemptydirs="false">
            <fileset refid="zipfiles"/>
        </zip>
    </target>

    <!-- Reports -->

    <target name="report:lint" hidden="true">
        <phplint haltonfailure="true" tofile="${dir.report.lint}/files.txt" level="verbose">
            <fileset refid="testfiles"/>
        </phplint>
    </target>

    <target name="report:phpmd" hidden="true">
        <mkdir dir="${dir.report.phpmd}"/>
        <phpmd rulesets="codesize,unusedcode,naming">
            <fileset refid="testfiles"/>
            <formatter type="xml" outfile="${dir.report.phpmd}/pmd.xml"/>
            <formatter type="html" outfile="${dir.report.phpmd}/pmd.html"/>
            <formatter type="text" outfile="${dir.report.phpmd}/pmd.txt"/>
        </phpmd>
    </target>

    <target name="report:phpcs" hidden="true">
        <mkdir dir="${dir.report.phpcs}"/>
        <phpcodesniffer standard="PSR2" encoding="utf-8" docGenerator="HTML" docFile="${dir.report.phpcs}/rules.html">
            <fileset refid="testfiles"/>
            <formatter type="checkstyle" outfile="${dir.report.phpcs}/format.checkstyle.xml"/>
            <formatter type="xml" outfile="${dir.report.phpcs}/format.xml"/>
            <formatter type="summary" outfile="${dir.report.phpcs}/format.summary.txt"/>
            <formatter type="source" outfile="${dir.report.phpcs}/format.source.txt"/>
            <formatter type="csv" outfile="${dir.report.phpcs}/format.csv"/>
        </phpcodesniffer>
    </target>

    <target name="report:pdepend" hidden="true">
        <mkdir dir="${dir.report.pdepend}"/>
        <phpdepend>
            <fileset refid="testfiles"/>
            <logger type="jdepend-xml" outfile="${dir.report.pdepend}/jdepend.xml"/>
            <logger type="summary-xml" outfile="${dir.report.pdepend}/summary.xml"/>
            <logger type="jdepend-chart" outfile="${dir.report.pdepend}/chart.svg"/>
            <logger type="overview-pyramid" outfile="${dir.report.pdepend}/pyramid.svg"/>
            <analyzer type="coderank-mode" value="method"/>
        </phpdepend>
    </target>

    <target name="report:phpcpd" hidden="true">
        <mkdir dir="${dir.report.phpcpd}"/>
        <phpcpd>
            <fileset refid="testfiles"/>
            <formatter type="pmd" outfile="${dir.report.phpcpd}/format.cpd.xml"/>
            <formatter type="default" outfile="${dir.report.phpcpd}/format.default.txt"/>
        </phpcpd>
    </target>

    <target name="report:documentor" hidden="true">
        <!-- Current PhpDocumentor version is incompatible with our current dependencies. Use phar file. -->
        <mkdir dir="${dir.report.doc}"/>
        <delete file="documentor.phar"/>
        <httpget dir="." url="http://phpdoc.org/phpDocumentor.phar" filename="documentor.phar" sslVerifyPeer="false" followRedirects="true"/>
        <!-- Luckily we can use pharlocation attribute of PhpDoc2Task here -->
        <phpdoc2 destdir="${dir.report.doc}" title="Oiz Orbiter" pharlocation="documentor.phar">
            <fileset refid="testfiles"/>
        </phpdoc2>
        <delete file="documentor.phar"/>
    </target>

    <target name="report:phploc" hidden="true">
        <!-- Current PhpLoc version is incompatible with our current dependencies. Use phar file. -->
        <mkdir dir="${dir.report.phploc}"/>
        <delete file="phploc.phar"/>
        <httpget dir="." url="https://phar.phpunit.de/phploc.phar" filename="phploc.phar" sslVerifyPeer="false" followRedirects="true"/>
        <!-- Luckily we can use pharlocation attribute of PhpLocTask here -->
        <phploc pharlocation="phploc.phar" reportName="Oiz Orbiter">
            <fileset refid="testfiles"/>
            <formatter outfile="${dir.report.phploc}/phploc.xml" type="xml"/>
            <formatter outfile="${dir.report.phploc}/phploc.csv" type="csv"/>
            <formatter outfile="${dir.report.phploc}/phploc.txt" type="cli"/>
        </phploc>
        <delete file="phploc.phar"/>
    </target>

    <target name="report:apigen" hidden="true">
        <!-- Current ApiGen version is incompatible with our current dependencies. Use phar file. -->
        <mkdir dir="${dir.report.apigen}"/>
        <delete file="apigen.phar"/>
        <httpget dir="." url="http://apigen.org/apigen.phar" filename="apigen.phar" sslVerifyPeer="false" followRedirects="true"/>
        <!-- ApiGenTask has no pharlocation attribute. The executable attrib behaves strange. Lets use CLI instead -->
        <exec command="php apigen.phar generate -s ${list.testfiles} -d ${dir.report.apigen} --title &quot;Oiz Orbiter&quot;"/>
        <delete file="apigen.phar"/>
    </target>

</project>